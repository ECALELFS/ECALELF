/** 
* \page page3 
* \verbatim
############################################################
## ECALELF (Ecal CALibration with ELectrons Framework)  
## study and calibration with Zee
## Code instructions and explanations
############################################################

###################################
#  ZNtupleDumper step (and module)
###################################



============================== Introduction
This module is dedicated to the production of the ntuples,
it contains all the c++ code for the Z ntuple dumping starting from
patElectrons with embedded regression energies and electronID

In this module you can find also the python cfg file to produce the
ntuples from ALCARECO running the sequence that select the event,
produce the new regression energies, produces the patElectron and
finally dump in the ZNtuples. 

There are also all the scripts to launch the production on 
 - official alcareco
 - privately produced alcareco
 - alcarereco (alcareco after rereco with ECALELF)


============================== Ntuple production a la ECALELF
In order to produce the ntuples, you need
 - the alcareco or alcarereco 
 - a json file

Here the important scripts:
 - ./script/dataPU.sh: this script gives you 
	- the last json file available
          merged with the 13Julv2 JSON file
 	- the json file reduced to a given run range
	- the PU distribution in data for a give run range and
          according to the mentioned merged json file 
 - ./script/prodNtuples.sh: this script creates the crab task for the
                            ntuple production
   The script options are 
prodNtuples.sh [options]
----- Common
 --type alcareco|alcarecosim|alcarereco|officialAlcareco:
        alcareco: produced privately on data
        alcarecosim: alcareco produced centrally or privately on MC
        alcarereco: alcareco format after rereco on SANDBOX
        officialAlcareco: produced centrally
 --extraName arg: additional name for folder structure (to make different versions)
----- MC
 --isMC
 --puWeight file.root
----- DATA
 --json_name jsonName
 --json jsonFile.root

 --ui_working_dir dir: do not use the default crab ui_working_dir (optional)
 --store: storage element for crab: (def=caf)
 --remote_dir: user remote dir on the storage element: --remote_dir group/alca_ecalcalib/alcareco
 --ntuple_remote_dir DIR: base directory storing the ntuples: --ntuple_remote_dir caf/user/shervin/Calibration/8TeV/ZNtuples

Ex. ./script/prodNtuples.sh --type alcareco \
--json tmp/201230-201678.json --json_name 201230-201678-Prompt \
`parseProdSandboxOptions.sh ../SANDBOX/sandbox_datasets.dat |tail -1`

 - 




#============================== RERECO Ntuple production

1) Check and update the working copy of the code
svn status -u
svn update

2) ../SANDBOX/scripts/SandboxQuick.sh -t tagFile -p period --ntuple --json jsonFile --json_name jsonName
 
3) check the status of the job
../SANDBOX/scripts/checkAndResubmitRereco.sh -t tagFile --ntuple

4) merge the output files
for dir in prod_zntuples/alcarereco/tagName/*/*/*; do echo $dir; ./scripts/mergeOutput.sh -u $dir; done


######################## OBSOLETE
To check the staus of the jobs submitted do:
for dir in prod_alcareco/DoubleElectron-RUN2012A-May10ReReco-v1/*/; do echo $dir; ./scripts/resubmitCrab.sh -u $dir; done











\endverbatim
**/
