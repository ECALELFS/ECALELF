/**
* \page page2 Ciao
* \verbatim
Testing the alcaraw + alcareco production
cmsRun ALCARAW_RECO/python/alcaSkimming.py files=file://../../../B292A7F8-3A7F-E111-A1A5-001D09F29114.root maxEvents=6 &> log2.log

Testing the alcarereco production
cmsRun ALCARAW_RECO/python/alcaSkimming.py files=file://alcaraw.root maxEvents=4 type=ALCARERECO tagFile=ALCARAW_RECO/config/reRecoTags/Cal_Jun2013_AlphaComb_v1.py &> log.log

#============================== RERECO
Instructions:

To run the Rereco with a new set of IC tags it is necessary to have a configuration file corresponding to those tags.

An example of a configuration file:

##############################################################
import FWCore.ParameterSet.Config as cms
from CondCore.DBCommon.CondDBSetup_cfi import *

#### Please fill with comments
# Basic tag combination for 2012 end year seminar conditions
# Laser, alpha tags are fixed: no time to improve them
# A set of IC are derived on top of them and will be tested:
# Cal_Nov2012_ICEle_v2:
# description
#

RerecoGlobalTag = cms.ESSource("PoolDBESSource",
                               CondDBSetup,
                               connect = cms.string('frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'),
                               globaltag = cms.string('GR_R_53_V13::All'),
                               toGet = cms.VPSet(
    cms.PSet(record = cms.string("EcalLaserAPDPNRatiosRcd"),
             tag = cms.string('EcalLaserAPDPNRatios_data_20120814_2011-2012_v3_upd20120919'),
             connect = cms.untracked.string("frontier://FrontierProd/CMS_COND_42X_ECAL_LAS")
             )
    ,cms.PSet(record = cms.string('EcalLaserAlphasRcd'),
              tag = cms.string('EcalLaserAlphas_EB_sic1_btcp152_EE_sic1_btcp116'),
              connect = cms.untracked.string('frontier://FrontierInt/CMS_COND_ECAL')
              )
    ,cms.PSet(record = cms.string("EcalIntercalibConstantsRcd"),
              tag = cms.string('EcalIntercalibConstants_V20120922_Ele19092012_2012IncEtaScale8TeV'),
              connect = cms.untracked.string("frontier://FrontierInt/CMS_COND_ECAL")
              )
    ),
                               BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService')
                               )

#############################################################


Where, in this case, the IC tag is EcalIntercalibConstants_V20120922_Ele19092012_2012IncEtaScale8TeV.
When the rereco has to be run with a new IC tag, a new file has to be created and it will be similar to the one above except for the section:

cms.PSet(record = cms.string("EcalIntercalibConstantsRcd"),
              tag = cms.string('EcalIntercalibConstants_V20120922_Ele19092012_2012IncEtaScale8TeV'),
              connect = cms.untracked.string("frontier://FrontierInt/CMS_COND_ECAL")
              )

It has to be modified with the replacement of the IC tag inside tag = cms.string('...')
These files are in the directory:
ALCARAW_RECOconfig/reRecoTags
The convention is to name these configuration files in this way: tag_name.py

So, for the rereco production follow the steps below:

1. create the tag_name.py in ALCARAW_RECOconfig/reRecoTags directory

2. commit the file in svn:
svn add config/reRecoTags/tag_name.py
svn ci -m "...." config/reRecoTags/tag_name.py

3. Define the period in alcaraw_datasets.dat if not already defined

4. run the script RerecoQuick.sh giving two parameters: period and tag_name
./scripts/RerecoQuick.sh  -p period -t config/reRecoTags/tag_name.py --scheduler=lsf --rereco
For example: ./scripts/RerecoQuick.sh -p Cal_Nov2012 -t config/reRecoTags/Cal_Nov2012_ICcombAllR9_v2.py --rereco --scheduler=lsf
 
More info:
For each dataset defined by the period,
the script 
 - makes the list of ALCARAW files present on EOS
 - creates a crab cfg file: tmp/sandboxRereco.cfg
 - execute the command crab -cfg tmp/sandboxRereco.cfg -create
 - cracks the list of input files for crab putting the ALCARAW files list
 - execute the command crab -c sandboxRereco/_taskDir_/ -submit
 - waits for 50 minutes
 - check if the jobs are exited with status 0, if not resubmit the failed jobs
 - re-check every 10 minutes
 - stops only if finishes all jobs with status 0

5. check the exit status of the jobs:
./script/checkAndResubmitRereco.sh -t config/reRecoTags/tag_name.py
  This command will loop over all folders corresponding to the different
  datasets and check if jobs are exited with status 0 


6. if all fine, commit the alcarereco_datasets.dat file
svn status -u
svn update
svn ci -m "rereco tag_name done"






\endverbatim
*/
