#============================== RERECO
Instructions:

1. create the tag_name.py in ALCARAW_RECO/config/reRecoTags directory
   Se more detailes below, in section "TAG FILE" 

2. commit the file in svn:
svn add config/reRecoTags/tag_name.py
svn ci -m "...." config/reRecoTags/tag_name.py

3. Define the period in alcaraw_datasets.dat if not already defined (e.g. RUN2012AB)

4. run the script RerecoQuick.sh giving two parameters: period and tag_name
./scripts/RerecoQuick.sh  -p period -t config/reRecoTags/tag_name.py --json=jsonFile.txt --json_name={runMin}-{runMax}_{prompt,rereconame}_{jsonVersion} 

For example: 
 ./scripts/RerecoQuick.sh -p RUN2012A -t config/reRecoTags/Cal_Dic2012_AlphaComb_v2.py --json=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions12/8TeV/Reprocessing/Cert_190456-208686_8TeV_22Jan2013ReReco_Collisions12_JSON.txt --json_name=190456-208686_22Jan_v1 --tutorial

5. check the exit status of the jobs:
./scripts/RerecoQuick.sh  -p period -t config/reRecoTags/tag_name.py --json=jsonFile.txt --json_name={runMin}-{runMax}_{prompt,rereconame}_{jsonVersion} --check

  This command will loop over all folders corresponding to the different
  datasets and check if jobs are exited with status 0 
  If jobs are finished, it merge all the produced ntuples and copy them to the right directory on EOS

6. if all fine, commit the alcarereco_datasets.dat and ntuple_datasets.dat files
svn status -u
svn update
svn ci -m "rereco tag_name done"




#============================== TAG FILES
To run the Rereco with a new set of conditions it is necessary to have a configuration file with the tags.

An example of a configuration file can be found in Calibration/ALCARAW_RECO/config/reRecoTags/test.py

Here an example:
##############################################################
import FWCore.ParameterSet.Config as cms
from CondCore.DBCommon.CondDBSetup_cfi import *

#### Please fill with comments
# Basic tag combination for 2012 end year seminar conditions
# Laser, alpha tags are fixed: no time to improve them
# A set of IC are derived on top of them and will be tested:
# Cal_Nov2012_ICEle_v2:
# description
#

RerecoGlobalTag = cms.ESSource("PoolDBESSource",
                               CondDBSetup,
                               connect = cms.string('frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'),
                               globaltag = cms.string('GR_R_53_V13::All'),
                               toGet = cms.VPSet(
    cms.PSet(record = cms.string("EcalLaserAPDPNRatiosRcd"),
             tag = cms.string('EcalLaserAPDPNRatios_data_20120814_2011-2012_v3_upd20120919'),
             connect = cms.untracked.string("frontier://FrontierProd/CMS_COND_42X_ECAL_LAS")
             )
    ,cms.PSet(record = cms.string('EcalLaserAlphasRcd'),
              tag = cms.string('EcalLaserAlphas_EB_sic1_btcp152_EE_sic1_btcp116'),
              connect = cms.untracked.string('frontier://FrontierInt/CMS_COND_ECAL')
              )
    ,cms.PSet(record = cms.string("EcalIntercalibConstantsRcd"),
              tag = cms.string('EcalIntercalibConstants_V20120922_Ele19092012_2012IncEtaScale8TeV'),
              connect = cms.untracked.string("frontier://FrontierInt/CMS_COND_ECAL")
              )
    ),
                               BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService')
                               )

#############################################################



The convention is to name these configuration files in this way: tag_name.py

So, for the rereco production follow the steps below:

