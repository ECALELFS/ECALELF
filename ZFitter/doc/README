/** 
* \page page4 How to work with ECALELF ntuples
* \verbatim
############## Introduction to ECALELF Z Fitter 
# ECALELF Z Fitter is designed to be a flexible tool to fit the Z
# lineshape using the ECALELF ZNtuples.


There are three important directories where the proper .dat files should be put:
 - data/validation/
 - data/regions/
 - data/runRanges/



#============================== validation config .dat file creation
This config file contains the list of files to run on, the files
containing the PU histograms for the PU reweighting and all the other
files needed.
The main idea in the ECALELF framework is to have a minimum set of variables in very small trees (the tree name is "selected"), while additional branches can be produced and added if needed as tree friends. The advantage is the possibility to produce ntuples for a larger set of studies with small specific trees for each of them.


The file is structured in 3 columns: tag, treeName and filePath as in the follows:
# commented lines
# tag	treeName	file
s1	selected	root://eoscms//eos/..../file.root
s2	selected	root://eoscms//eos/..../file.root
d1	selected	root://eoscms//eos/..../file.root
d	pileupHist	/afs/cern.ch/cms/CAF/CMSALCA/ALCA_ECALCALIB/ECALELF/puFiles/190456-204567-13Julv2_lastPrompt.69400.observed.root
s	pileupHist	/afs/cern.ch/cms/CAF/CMSALCA/ALCA_ECALCALIB/ECALELF/puFiles/nPU-Summer12_DD3.observed.root

	The first column (tag) indicates if this file is signal MC (s), background MC (b), or data (d). 
        The single samples are indicated by a number (s1, s2, etc., d1, d2, etc.)
	The second column (treeName) is the name of the tree in the file
	The third column (filePath) is the full path of the file
	files with the same tag and the same treeName are put in the
        same chain
	files with the same tag but different treeName are added as
	friends 


#======================================== Working with ntuples
The .dat config file keeping the list of ntuples can be modified according to the needs adding or commenting unuseful ntuples or friend trees.
It's then important to have a simple way to merge the trees in order to be able to manipulate, scan and plot variables from the ntuples.
The ZFitter/script/GenRootChain.sh has been designed for this.

running the command:
./script/GenRootChain.sh -f data/validation/myConfigFile.dat 
in the tmp/ the s_chain.root, d_chain.root load.C are created for MC and data respectively.
The .root files have the TChains already defined, merging the files with the same treeName in the config file and adding the friends properly. 
Due to a bug in ROOT in order to properly load the files the load.C script is created.

To work with ntuples you can do:
root -l tmp/d_chain.root tmp/s_chain.root tmp/load.C
data    -> Draw("*");
signalA -> Draw("*");

NB: Please check in the load.C file the correct assignment of the tree pointer to the correct file.

#============================== Data/MC plots
A standard function for data/MC plots have been prepared and is available in macro/PlotDataMC.C

In the following you can find an example of production of data/MC plots with a config file with 
22Jan rereco data, run dependent MC (three samples with different generators: s1, s2, s3)
./script/GenRootChain.sh -f data/validation/22Jan2012-runDepMCAll_v2.dat
root -l -b -q tmp/d_chain.root tmp/s1_chain.root tmp/s2_chain.root tmp/s3_chain.root tmp/load.C macro/standardDataMC.C

*****************
The load.C script is commented below:
{
  gROOT->ProcessLine(".L macro/PlotDataMC.C+"); // -> functions for data/MC plots
  gROOT->ProcessLine(".L src/setTDRStyle.C");
  gROOT->ProcessLine(".L macro/addChainWithFriends.C+"); // -> functions to work around ROOT bugs in friend treatment

  setTDRStyle1();

  TChain *data   = (TChain *) _file0->Get("selected");  // -> pointers to samples
  TChain *signalA = (TChain *) _file1->Get("selected"); // -> pointers to samples
  TChain *signalB = (TChain *) _file2->Get("selected"); // -> pointers to samples
  TChain *signalC = (TChain *) _file3->Get("selected"); // -> pointers to samples

  ReassociateFriends(_file0, data);    // -> functions to correct associate the friends to their main trees
  ReassociateFriends(_file1, signalA); // -> functions to correct associate the friends to their main trees
  ReassociateFriends(_file2, signalB); // -> functions to correct associate the friends to their main trees
  ReassociateFriends(_file3, signalC); // -> functions to correct associate the friends to their main trees

   TDirectory *curDir = new TDirectory("curDir","");
   curDir->cd();

  TString outputPath="tmp/";

// look at standardDataMC.C for some examples  
}
*****************
The standardDataMC.C example:
{
  std::vector<TString> mcLabel_vec;  // create a vector of labels for the MC samples
  mcLabel_vec.push_back("Madgraph");
  mcLabel_vec.push_back("Powheg");
  mcLabel_vec.push_back("Sherpa");

  //MakeChainVector(signalA,signalB,signalC) 
  
  c = PlotDataMCs(data, // pointer to data chain
                  MakeChainVector(signalA,signalB,signalC), // creates a vector of chains for MCs
                  "etaEle",  // variable to be plotted
                  "(100,-2.5,2.5)", // binning of x axis
                  "eleID_loose-trigger-noPF-Et_25", // stream based selection with ECALELF convention -> a specific class takes care in parsing the string and provide the selections cuts
                  "", // additional selection string in standard ROOT syntax,
                  "Data", // label for data in Legend
                   mcLabel_vec, // vector of strings for MC labels in legend
                   "#eta", // x axis title
                   "", 
                   false, // do plot in log scale
                   true // reweight MC for PU
                   ); // use r9weight
   c->SaveAs(outputPath+"etaEle-r9reweighted-Et_25.eps");
   c->SaveAs(outputPath+"etaEle-r9reweighted-Et_25.C");
  delete c;
}




#============================================================
The files containing the histograms for the PU reweight are
indicated with pileupHist as treeName and they are treated in a
different way. There must be only one pileupHist for d and one for s,
then the program calculates the weights for the MC, produces a
temporary file with just one tree containing the weights (pileupTree)
and it is added as friend to the chain of MC. You can also provide
directly the "temporary" root file indicating
s	pileupTree	file.root


#============================== RERECO VALIDATION instructions


1) If it does not exist yet, create the PU distribution in data with the proper script in ZNtupleDumper
   See PU data section in Calibration/ZNtupleDumper/doc/README for details

2) Create the .dat config file and put it into (see previous section for details)
   ./data/validation/rereco/rerecoGroupName/

3) Be sure that the runRanges .dat file has the proper run ranges for the stability plots
   ./data/runRanges/monitoring.dat

4) Launch the fit:
./script/monitoring_validation.sh -f data/validation/file.dat --selection WP80_PU --invMass_var=invMass_SC --rereco rerecoGroupName 




#============================== produce run ranges file
The idea is to produce a file with the run ranges with 100k Zee events
(to have enough statistics in the EE), but taking into account also
that some run ranges should not be between to TSs or two era (RUN A
and B).

The run ranges 


./bin/ZFitter.exe -f file.dat --runDivide










The program 

Class description:
I'm glad to present the release of the ZFit_class module

This permit to fit the Z distribution using different PDF as signal
and bkg (not yet implemented) and to retrieve the shift respect to the
nominal position of the Z and the Z width estimation.

BE CAREFULL to the meaning of the Z peak shift and the Z width with
respect to the signal pdf used...

The public methods in ./include/ZFit_class.hh are all you need to
implement the ZFit_class in your programs.

ZFit_class can fit both binned and unbinned datasets (TH1F,
RooDataHist not yet implemented, RooDataSet).

Extentions are simple.

You can also pass a list of TChain using the constructor with 
signal_chain, data_chain and bkg_chain and the use of a config file

Example:
./bin/ZFitter.exe -f test/config.conf --regionsFile data/regions/validation.dat --runRangesFile data/runRanges/monitoring.dat


 make && ./bin/ZFitter.exe -f data/validation/monitoring_2012_53X.dat --regionsFile data/regions/validation.dat --runRangesFile data/runRanges/monitoring.dat --saveTreeWeight --dataPU data/190456-202305-13Jul_Prompt_Cal_Nov2012.69400.observed.root --mcPU data/nPU-Summer12_DD3.observed.root 



You can make the single sub pdf classes to be derived by a RooAbsPdf, in this way the pointer to the RooAbsPdf, will


Once the fit is finished:
./script/makeTable.sh



Folder schema:
 - one folder for data with
	- one subfolder per selection
	- for each selection one subfolder with the energy used for the invariant mass
	- for each energy
		- table:  store the tables in .dat and .tex formats   
		- img:    store the plots (fit and other)
			- fit
			- history
		- fitres: store the fit results
 - one folder for MC with the same structure



######################### Standard scripts
For monitoring, stability and global performance plot and tables, please refer to the 
./script/monitoring_validation.sh script
Use:
./script/monitoring_validation.sh -f configFile --puName PUreweightName --runRangesFile runRangesFile --invMass_var invMass
Default option values are:  
commonCut=Et_25
selection=WP80_PU
invMass_var=invMass_SC_regrCorr_ele
configFile=data/validation/monitoring_2012_53X.dat
regionFile=data/regions/validation.dat
runRangesFile=data/runRanges/monitoring.dat



######################### SMEARING
The class takes the data and mc chains, the electron regions
Loop over the trees and produce a vector of elements of a class that
contains the energies of the electrons, the angle between them, the
name and index of the category of the electrons
Once imported, it's possible to obtain a vector of invariant mass,
with one invariant mass per di-electron category.
Once obtained an invariant mass for data and one for MC,
it's possible to evaluate the NLL to return to MIGRAD for the
minimization.





Each validation + stability uses ~20MB


How to create validation slides:
the makeValidationSlides.sh script, create in the tmp directory the following files:
[STATUS] Creating validation intro slide: tmp/validation-invMass_SC-WP80_PU-intro_slide.tex
[STATUS] Creating validation table slides: tmp/validation-invMass_SC-WP80_PU-table_slide.tex
[STATUS] Creating validation fit slides: tmp/validation-invMass_SC-WP80_PU-fit_slide.tex
[STATUS] Creating validation stability slides: tmp/validation-invMass_SC-WP80_PU-stability_slide.tex
that can be imported in your beamer slide base presentation
The command is:
./script/makeValidationSlides.sh --dirData test/data/monitoring_2012_53X --dirMC test/MC/DYJets-Summer12-START53-ZSkim-allRange/190456-203002-13Jul_PromptTS --selection WP80_PU --invMass_var invMass_SC --type validation


###SMEAR
./bin/ZFitter.exe -f data/validation/moriond2013.dat --regionsFile data/regions/validation_smearing.dat --smearerFit --invMass_var=invMass_SC_regrCorr_ele
 ./script/GenRootChain.sh -f data/validation/test.dat
root -l tmp/s_chain.root tmp/d_chain.root tmp/exampleMacro.C

5000 events per category, ~5bins
energySC_A_B-Et_25
--onlyDiagonal
(test)
--commonCut=absEta_0_1-Et_25
then in .dat file: energy_SC_A_B_gold(bad)



  //------------------------------ 
  TGraphErrors *g_EB = columns_vs_var("tmp/tmpFile.dat", "EB", 3);
  g_EB->SaveAs("tmp/g_EB-ADC-raw.root");
  g_EB->Fit("pol1");
  g_EB->GetXaxis()->SetTitle("#DeltaG [%]");
  g_EB->GetYaxis()->SetTitle("#DeltaP [%]");
  c->SaveAs("tmp/EB-ADC_stability-rawSC.eps");

  c->Clear();
  TGraphErrors *g_EE = columns_vs_var("tmp/tmpFile.dat", "EE", 3);
  g_EE->SaveAs("tmp/g_EE-ADC-raw.root");
  g_EE->Fit("pol1");
  g_EE->Draw("AP");
  g_EE->GetXaxis()->SetTitle("#DeltaG [%]");
  g_EE->GetYaxis()->SetTitle("#DeltaP [%]");
  
  c->SaveAs("tmp/EE-ADC_stability-rawSC.eps");

  c->Clear();
  g_EB->Draw("AP");
  c->SaveAs("tmp/EB-ADC_stability-rawSC.eps");

  c->Clear();
  g_EE->Draw("AP");
  c->SaveAs("tmp/EE-ADC_stability-rawSC.eps");

##### ECAL scale systematics
    #list of systematics for ECAL scale:
    # etaScale
    # time stability -> stability
    # pileup EB, pileup EE
    # 

# list of plots:



################# SmearerFit instructions
 - create the tree with the smearerCat category to speed up further running with same categories
./bin/ZFitter.exe -f data/validation/22Jan2012-stdMC.dat --regionsFile=data/regions/scaleStep2smearing_9.dat \
	--commonCut=Et_25-trigger-noPF-EB --smearerFit \
	--outDirFitResData=test/dato/fitres/Hgg_Et_v1/ \
	--autoNsmear --constTermFix --smearerType=profile --saveRootMacro --addBranch=smearerCat \
	>&test/dato/fitres/Hgg_Et_v1/log.log


Package content:
 - BW_CB_pdf_class
	Class providing a RooPdf correspoding to the convolution of a
	Breit-Wigner and Crystal Ball
 - Cruijff_pdf_class
	Class providing a RooPdf corresponding to a Cruijff function
        (Gaussian with exponential tails)
 - ElectronCategory_class
	Parser class for electron categorization providing TCuts for
	RooDataset 
 - ZFit_class 
	Class for fitting the Z lineshape from any RooAbsData 
 - ZFitter
	General program for Z fit (monitoring, calibration validation)

Input:
While the classes are almost generic and flexible, the ZFitter program
is thought to be used starting from ECALELF ntuples (ZNtuples).

 - data ntuples must contain:
	- a tree "selected"
 - mc ntuples must contain:
	- a tree "selected"
 - config file: see next section
 - run range config file:
	file containing a list of run ranges: every region will be
	checked in every run range in this file
 - category config file:
	file containing a list of regions (categories) for electrons
	it will be combined with the run range config file (if provided)
 - option:
	- global pt cut
	- selection
	- energy used for the invariant mass calculation (invMass_var)
	- (not implemented) bin/unbin/mixed: performe binned/unbinned fit or a mix
	  version (unbinned for < mixedSwitchValue events, binned otherwise) 
	- (not implemented) mixed switch value: 200 by default 
	- 

If no external PU reweight is provided and no tree containing the PU
reweight for the MC, the program reads the files, add all the data PU
histograms, add all the MC PU histograms, calculates the PU
reweight, produce a tree with the per event weight for the MC. 
Then add the tree with the PU weights to the MC chain as a friend
tree.

\endverbatim
*/