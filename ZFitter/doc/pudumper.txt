/**
* \page PUFILES_  Generating PU weight files
\tableofcontents

PU weights can be generated following the \b official \b recipe or by the  "quick and dirty" reweight using the reconstructed number of primary vertices (nPV)

In both cases what is needed is:
 - a distribution for MC
 - a distribution for data
 - name of the variable in ntuples to be used as inputs for the event-by-event weight assignment

The files with the PU distributions should be added to the config file used by ZFitter (for more info about the config files see \ref ZFitterConfigFiles)

\section OFFICIALPUWEIGHTS_ Official recipe for PU weights

\subsection MCPUtrue_ MC true PU
The MC distribution is the true PU distribution defined in the PU scenario during the MC generation. There is a python config file in CMSSW that contains the values.
The files can be found in \verbatim SimGeneral/MixingModule/python \endverbatim
Make sure you pick up the right file matching the PU scenario used in your MC.

The MC pileup histograms should be put on EOS in the calibration project directory:
\verbatim /eos/project/c/cms-ecal-calibration/data/puHistos/  \endverbatim

To generate this MC Pileup root file:
\verbatim
cd $CMSSW_BASE/Calibration/ZFitter/;
python script/generateMCPUHist.py PileupCFI=mix_2016_25ns_SpringMC_PUScenarioV1_PoissonOOTPU_cfi output=PUSpring16-nPUtrue.root
\endverbatim

# pileup scenarios

scenario   | python file                                             | pileupHist root file 
---------- | ------------------------------------------------------- | -------------------------
PUSpring16 | mix_2016_25ns_SpringMC_PUScenarioV1_PoissonOOTPU_cfi.py | PUSpring16-nPUtrue.root
PUMoriond17 | mix_2016_25ns_Moriond17MC_PoissonOOTPU_cfi.py          | PUMoriond17-nPUtrue.root

\subsection DATAPUtrue_ True PU distribution in data
Instructions can be found in
<A HREF="https://twiki.cern.ch/twiki/bin/viewauth/CMS/PileupJSONFileforData"> PileupJSONFileforData </A>

In summary you need:
 - json file used in your analysis
 - location of the pileup json file
 - minimum bias cross section

To generate the root file with the \b pileup histogram:
\verbatim 
JSONFILE=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/ReReco/Final/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt
PileUpJSON=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/pileup_latest.txt
OUTPUTFILE=271036-284044_23Sept_v1-nPUtrue.root
pileupCalc.py -i $JSONFILE --inputLumiJSON $PileUpJSON --calcMode true --minBiasXsec 69200 --maxPileupBin 50 --numPileupBins 50 $OUTPUTFILE
\endverbatim


\section NPV_ Using Number of Primary Vertices

The \b pileup histograms can simply be histograms of the \b nPV branch for data and MC.
\b CAVEAT: the nPV is biased by the selection used in your sample, to reduce the data/MC difference, please apply the full selection of your analysis.

The name of the tree in the config file has to contain the string "nPV": 
\verbatim
s   pileupHist_nPV   file.root
\endverbatim



------------------------------
The files containing the histograms for the PU reweight are
indicated with pileupHist as treeName and they are treated in a
different way. There must be only one pileupHist for d and one for s,
then the program calculates the weights for the MC, produces a
temporary file with just one tree containing the weights (pileupTree)
and it is added as friend to the chain of MC. You can also provide
directly the "temporary" root file indicating
s	pileupTree	file.root

------------------------------------------
*/
