#include "Calibration/IsolatedParticles/interface/FindCaloHit.h"
#include "Calibration/IsolatedParticles/interface/FindEtaPhi.h"
#include<iostream>

namespace spr{

  template <typename T>
  double eECALmatrix(CaloNavigator<DetId>& navigator,edm::Handle<T>& hits, int ieta, int iphi, bool debug) {
	
    std::vector< typename T::const_iterator> hit = hitECALmatrix(navigator,hits,ieta,iphi,debug);
 
    if (debug) {
      std::cout << "Inside eECALmatrix " << 2*ieta+1 << "X" << 2*iphi+1 << std::endl;
      std::cout << "nXtals " << hit.size();
      for (unsigned int ihit=0; ihit<hit.size(); ihit++) 
        std::cout <<" ihit:" << ihit << " " << (unsigned int)hit[ihit]->id();
      std::cout << "\n" << std::endl;
    }

    double energySum = 0.0;
    for (unsigned int ihit=0; ihit<hit.size(); ihit++) {
      energySum += hit[ihit]->energy();
    }
    return energySum;
  }

  template< typename T>
  double eECALmatrix(const DetId& detId, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, const CaloGeometry* geo, const CaloTopology* caloTopology, int ieta, int iphi, bool debug) {

    std::vector<DetId> vdets = spr::matrixECALIds(detId, ieta, iphi, geo, caloTopology, debug);

    if (debug) {
      std::cout << "Inside eECALmatrix " << 2*ieta+1 << "X" << 2*iphi+1
                << " nXtals " << vdets.size() << std::endl;
   }

   return spr::energyECAL(vdets, hitsEB, hitsEE, debug);
  }

  template< typename T>
  double eECALmatrix(const DetId& detId, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, const CaloGeometry* geo, const CaloTopology* caloTopology, int ietaE, int ietaW, int iphiN, int iphiS, bool debug) {

    std::vector<DetId> vdets = spr::matrixECALIds(detId, ietaE, ietaW, iphiN, iphiS, geo, caloTopology, debug);

    if (debug) {
      std::cout << "Inside eECALmatrix " << ietaE+ietaW+1 << "X" 
        	<< iphiN+iphiS+1 << " nXtals " << vdets.size() << std::endl;
   }

   return spr::energyECAL(vdets, hitsEB, hitsEE, debug);
  }

  template< typename T>
  std::pair<double,int> eECALmatrixTotal(const DetId& detId, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, const CaloGeometry* geo, const CaloTopology* caloTopology, int ieta, int iphi, bool debug) {

    spr::EtaPhi etaphi = spr::getEtaPhi(ieta,iphi,debug);

    // Get maximum of all the trials
    double energySum = 0;
    int    itrym = 0;
    for (int itry=0; itry<etaphi.ntrys; itry++) {
      std::vector<DetId> vdets = spr::matrixECALIds(detId, etaphi.ietaE[itry], etaphi.ietaW[itry], etaphi.iphiN[itry], etaphi.iphiS[itry], geo, caloTopology, debug);
      double energy = spr::energyECAL(vdets, hitsEB, hitsEE, debug);
      if (energy > energySum) {
	energySum = energy;
	itrym     = itry;
      }
    }

    if (debug) std::cout << "eECALmatrixTotal:: energy deposit in " << ieta << "X" << iphi << " matrix is " << energySum << " for trial # " << itrym << std::endl;
    return std::pair<double,int>(energySum,itrym);
  }

  template <typename T>
  std::vector<typename T::const_iterator> hitECALmatrix(CaloNavigator<DetId>& navigator,edm::Handle<T>& hits, int ieta, int iphi, bool debug) {

    DetId thisDet;
    std::vector< typename T::const_iterator> hit, hitlist;

    for (int dx = -ieta; dx < ieta+1; ++dx) {
      for (int dy = -iphi; dy < iphi+1; ++dy) {

        // shift the navigator by dx/dy crystals in eta/phi
        thisDet = navigator.offsetBy(dx, dy);

        // Place the navigator back to the original position
        navigator.home();

        if (thisDet != DetId(0)) {
	  hit = spr::findHit(hits, thisDet);
          if (debug && hit.size() > 0) {
            if (thisDet.subdetId() == EcalBarrel) {
	      EBDetId id = thisDet;
	      std::cout << "hitECALmatrix::Cell 0x" << std::hex << thisDet() << std::dec << " " << id;
            } else if (thisDet.subdetId() == EcalEndcap) {
              EEDetId id = thisDet;
	      std::cout << "hitECALmatrix::Cell 0x" << std::hex << thisDet() << std::dec << " " << id;
            } else {
	      std::cout << "hitECALMatrix::Cell 0x" << std::hex << thisDet() << std::dec << " Unknown Type";
            }	
          }
  	  for (unsigned int ihit=0; ihit<hit.size(); ihit++) {
	    if (hit[ihit] != hits->end()) {
              hitlist.push_back(hit[ihit]);
              if (debug) std::cout << " hit " << ihit << " " << hit[ihit]->energy();
            }
	  }
          if (debug && hit.size() > 0) std::cout << std::endl;
        }

      } // iphi
    } // ieta

    return hitlist;
  }

  template <typename T>
  double energyECAL(std::vector<DetId>& vdets, edm::Handle<T>& hitsEB,  edm::Handle<T>& hitsEE, bool debug) {

    double energySum = 0.0;
    for (unsigned int i1=0; i1<vdets.size(); i1++) {
      if (vdets[i1] != DetId(0)) {
	std::vector< typename T::const_iterator> hit;
        if (vdets[i1].subdetId()==EcalBarrel) {
          hit = spr::findHit(hitsEB,vdets[i1]);
        } else if (vdets[i1].subdetId()==EcalEndcap) {
          hit = spr::findHit(hitsEE,vdets[i1]);
        }
        if (debug) std::cout << "Xtal 0x" <<std::hex << vdets[i1]() <<std::dec;
  	for (unsigned int ihit=0; ihit<hit.size(); ihit++) {
          double en=0;
          if (vdets[i1].subdetId()==EcalBarrel) {
            if (hit[ihit] != hitsEB->end()) en = hit[ihit]->energy();
          } else if (vdets[i1].subdetId()==EcalEndcap) {
            if (hit[ihit] != hitsEE->end()) en = hit[ihit]->energy();
          }
          energySum += en;
          if (debug) std::cout << " " << ihit << " " << en;
        }
        if (debug) std::cout << "\n";
      }
    }
    if (debug) std::cout << "energyECAL: energySum = " <<energySum <<std::endl;
    return energySum;
  }

}


