#include<iostream>
#include "DataFormats/EcalDetId/interface/EcalSubdetector.h"

namespace spr {

  template <typename T>
  std::vector<typename T::const_iterator> findHit(edm::Handle<T>& hits, DetId thisDet, bool debug) {
  
    std::vector<typename T::const_iterator> hit = find(hits, thisDet);

    return hit;
  }

  std::vector<EcalRecHitCollection::const_iterator> find(edm::Handle<EcalRecHitCollection>& hits, DetId thisDet, bool debug) {

    std::vector<EcalRecHitCollection::const_iterator> hit;
    hit.push_back( hits->find(thisDet) );
    return hit;
  }

  std::vector<HBHERecHitCollection::const_iterator> find(edm::Handle<HBHERecHitCollection>& hits, DetId thisDet, bool debug) {
    std::vector<HBHERecHitCollection::const_iterator> hit;
    hit.push_back( hits->find(thisDet) );
    return hit;
  }

  std::vector<edm::PCaloHitContainer::const_iterator> find(edm::Handle<edm::PCaloHitContainer>& hits, DetId thisDet, bool debug) {

    std::vector<edm::PCaloHitContainer::const_iterator> hit;

    edm::PCaloHitContainer::const_iterator ihit;
    for (ihit=hits->begin(); ihit!=hits->end(); ihit++) {
      DetId detId(ihit->id());
      if (detId == thisDet) {
        hit.push_back(ihit);
      }
    }
  
    return hit;
  }

  void getEtaPhi(HBHERecHitCollection::const_iterator hit, std::vector<int>& RH_ieta, std::vector<int>& RH_iphi, std::vector<double>& RH_ene) {

    RH_ieta.push_back(hit->id().ieta());
    RH_iphi.push_back(hit->id().iphi());
    RH_ene.push_back(hit->energy());
  }

  void getEtaPhi(edm::PCaloHitContainer::const_iterator hit, std::vector<int>& RH_ieta, std::vector<int>& RH_iphi, std::vector<double>& RH_ene)  {
    // SimHit function not yet implemented.
    RH_ieta.push_back(-9);
    RH_iphi.push_back(-9);
    RH_ene.push_back(-9.);
  }

  void getEtaPhi(EcalRecHitCollection::const_iterator hit, std::vector<int>& RH_ieta, std::vector<int>& RH_iphi, std::vector<double>& RH_ene) {
    // Ecal function not yet implemented.
    RH_ieta.push_back(-9);
    RH_iphi.push_back(-9);
    RH_ene.push_back(-9.);
  }

  void getEtaPhi(HBHERecHitCollection::const_iterator hit,int& ieta,int& iphi){
    ieta = hit->id().ieta();
    iphi = hit->id().iphi();
  }

  void getEtaPhi(edm::PCaloHitContainer::const_iterator hit,int& ieta,int& iphi){
    DetId id = DetId(hit->id());
    if (id.det() == DetId::Hcal) {
      ieta = ((HcalDetId)(hit->id())).ieta();
      iphi = ((HcalDetId)(hit->id())).iphi();
    } else if (id.det() == DetId::Ecal && id.subdetId() == EcalBarrel) {
      ieta = ((EBDetId)(id)).ieta();
      iphi = ((EBDetId)(id)).iphi();
//    } else if (id.det() == DetId::Ecal && id.subdetId() == EcalEndcap) {
//      ieta = ((EEDetId)(id)).ieta();
//      iphi = ((EEDetId)(id)).iphi();
    } else {
      ieta = 999;
      iphi = 999;
    }
  }

  void getEtaPhi(EcalRecHitCollection::const_iterator hit,int& ieta,int& iphi){
    DetId id = hit->id();
    if (id.subdetId() == EcalBarrel) {
      ieta = ((EBDetId)(id)).ieta();
      iphi = ((EBDetId)(id)).iphi();
//    } else if (id.subdetId() == EcalEndcap) {
//      ieta = ((EEDetId)(id)).ieta();
//      iphi = ((EEDetId)(id)).iphi();
    } else {
      ieta = 999;
      iphi = 999;
    }
  }

  double getEnergy(HBHERecHitCollection::const_iterator hit) {
    return hit->energy();
  }

  double getEnergy(EcalRecHitCollection::const_iterator hit) {
    return hit->energy();
  }
  
  double getEnergy(edm::PCaloHitContainer::const_iterator hit) {
    // This will not yet handle Ecal CaloHits!!
    double samplingWeight = 1.;
    // Hard coded sampling weights from JFH analysis of iso tracks
    // Sept 2009.
    HcalDetId detId(hit->id());
    if (detId.subdet() == HcalBarrel)
      samplingWeight = 114.1;
    else if (detId.subdet() == HcalEndcap) 
      samplingWeight = 167.3;
    else {
      // ONLY protection against summing HO, HF simhits
      return 0.;
    }
    
    return samplingWeight*hit->energy();
  }

  GlobalPoint getGpos(const CaloGeometry* geo,HBHERecHitCollection::const_iterator hit) {
    DetId detId(hit->id());
    return geo->getPosition(detId);
  }

  GlobalPoint getGpos(const CaloGeometry* geo,edm::PCaloHitContainer::const_iterator hit) {
    DetId detId(hit->id());
    return geo->getPosition(detId);
  }

  GlobalPoint getGpos(const CaloGeometry* geo, EcalRecHitCollection::const_iterator hit) {
    // Not tested for EcalRecHits!!
    if (hit->id().subdetId() == EcalEndcap) {
      EEDetId EEid = EEDetId(hit->id());
      return geo->getPosition(EEid);
    } else { // (hit->id().subdetId() == EcalBarrel)
      EBDetId EBid = EBDetId(hit->id());
      return geo->getPosition(EBid);
    }
  }

}

