//
// File generated by rootcint at Sat Jul  5 14:11:52 2008

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TCellDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TCell_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TCell(void *p = 0);
   static void *newArray_TCell(Long_t size, void *p);
   static void delete_TCell(void *p);
   static void deleteArray_TCell(void *p);
   static void destruct_TCell(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCell*)
   {
      ::TCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCell", ::TCell::Class_Version(), "TCell.h", 15,
                  typeid(::TCell), DefineBehavior(ptr, ptr),
                  &::TCell::Dictionary, isa_proxy, 0,
                  sizeof(::TCell) );
      instance.SetNew(&new_TCell);
      instance.SetNewArray(&newArray_TCell);
      instance.SetDelete(&delete_TCell);
      instance.SetDeleteArray(&deleteArray_TCell);
      instance.SetDestructor(&destruct_TCell);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCell*)
   {
      return GenerateInitInstanceLocal((::TCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TCell::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCell::Class_Name()
{
   return "TCell";
}

//______________________________________________________________________________
const char *TCell::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCell::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCell::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCell::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCell*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _id;
      R__b >> _e;
      R__b.CheckByteCount(R__s, R__c, TCell::IsA());
   } else {
      R__c = R__b.WriteVersion(TCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _id;
      R__b << _e;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TCell::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TCell.
      TClass *R__cl = ::TCell::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "_id", &_id);
      R__insp.Inspect(R__cl, R__parent, "_e", &_e);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCell(void *p) {
      return  p ? new(p) ::TCell : new ::TCell;
   }
   static void *newArray_TCell(Long_t nElements, void *p) {
      return p ? new(p) ::TCell[nElements] : new ::TCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCell(void *p) {
      delete ((::TCell*)p);
   }
   static void deleteArray_TCell(void *p) {
      delete [] ((::TCell*)p);
   }
   static void destruct_TCell(void *p) {
      typedef ::TCell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCell

/********************************************************
* TCellDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableTCellDict();

extern "C" void G__set_cpp_environmentTCellDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TCell.h");
  G__cpp_reset_tagtableTCellDict();
}
#include <new>
extern "C" int G__cpp_dllrevTCellDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TCell */
static int G__TCellDict_83_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCell* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TCell[n];
     } else {
       p = new((void*) gvp) TCell[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TCell;
     } else {
       p = new((void*) gvp) TCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__TCellDictLN_TCell);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCell* p = NULL;
   long gvp = G__getgvp();
   //m: 2
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new TCell((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) TCell((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__TCellDictLN_TCell);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TCell*) G__getstructoffset())->e());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((TCell*) G__getstructoffset())->id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCell*) G__getstructoffset())->SetE((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCell*) G__getstructoffset())->SetId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TCellDict_83_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TCellDict_83_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TCell(*(TCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__TCellDictLN_TCell);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCell G__TTCell;
static int G__TCellDict_83_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (TCell*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCell*) (soff+(sizeof(TCell)*i)))->~G__TTCell();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (TCell*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((TCell*) (soff))->~G__TTCell();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TCellDict_83_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCell* dest = (TCell*) G__getstructoffset();
   *dest = *(TCell*) libp->para[0].ref;
   const TCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TCell */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTCellDict {
 public:
  G__Sizep2memfuncTCellDict(): p(&G__Sizep2memfuncTCellDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTCellDict::*p)();
};

size_t G__get_sizep2memfuncTCellDict()
{
  G__Sizep2memfuncTCellDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTCellDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TCellDictLN_TCell))) {
     TCell *G__Lderived;
     G__Lderived=(TCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TCellDictLN_TCell),G__get_linked_tagnum(&G__TCellDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTCellDict() {

   /* Setting up typedef entry */
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TCell */
static void G__setup_memvarTCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TCellDictLN_TCell));
   { TCell *p; p=(TCell*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_id=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"_e=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__TCellDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTCellDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTCell(void) {
   /* TCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TCellDictLN_TCell));
   G__memfunc_setup("TCell",468,G__TCellDict_83_0_1, 105, G__get_linked_tagnum(&G__TCellDictLN_TCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCell",468,G__TCellDict_83_0_2, 105, G__get_linked_tagnum(&G__TCellDictLN_TCell), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - i f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("e",101,G__TCellDict_83_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("id",205,G__TCellDict_83_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetE",369,G__TCellDict_83_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetId",473,G__TCellDict_83_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TCellDict_83_0_7, 85, G__get_linked_tagnum(&G__TCellDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&TCell::Class), 0);
   G__memfunc_setup("Class_Name",982,G__TCellDict_83_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TCell::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__TCellDict_83_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&TCell::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__TCellDict_83_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&TCell::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TCellDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TCellDict_83_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TCellDict_83_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TCell::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TCellDict_83_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&TCell::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__TCellDict_83_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TCell::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TCellDict_83_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&TCell::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("TCell", 468, G__TCellDict_83_0_19, (int) ('i'), G__get_linked_tagnum(&G__TCellDictLN_TCell), -1, 0, 1, 1, 1, 0, "u 'TCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TCell", 594, G__TCellDict_83_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TCellDict_83_0_21, (int) ('u'), G__get_linked_tagnum(&G__TCellDictLN_TCell), -1, 1, 1, 1, 1, 0, "u 'TCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTCellDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTCellDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTCellDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TCellDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TCellDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TCellDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TCellDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TCellDictLN_TCell = { "TCell" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTCellDict() {
  G__TCellDictLN_TClass.tagnum = -1 ;
  G__TCellDictLN_TBuffer.tagnum = -1 ;
  G__TCellDictLN_TMemberInspector.tagnum = -1 ;
  G__TCellDictLN_TObject.tagnum = -1 ;
  G__TCellDictLN_TCell.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTCellDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TCellDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TCellDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TCellDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TCellDictLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum(&G__TCellDictLN_TCell),sizeof(TCell),-1,62720,(char*)NULL,G__setup_memvarTCell,G__setup_memfuncTCell);
}
extern "C" void G__cpp_setupTCellDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTCellDict()");
  G__set_cpp_environmentTCellDict();
  G__cpp_setup_tagtableTCellDict();

  G__cpp_setup_inheritanceTCellDict();

  G__cpp_setup_typetableTCellDict();

  G__cpp_setup_memvarTCellDict();

  G__cpp_setup_memfuncTCellDict();
  G__cpp_setup_globalTCellDict();
  G__cpp_setup_funcTCellDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTCellDict();
  return;
}
class G__cpp_setup_initTCellDict {
  public:
    G__cpp_setup_initTCellDict() { G__add_setup_func("TCellDict",(G__incsetup)(&G__cpp_setupTCellDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTCellDict() { G__remove_setup_func("TCellDict"); }
};
G__cpp_setup_initTCellDict G__cpp_setup_initializerTCellDict;

